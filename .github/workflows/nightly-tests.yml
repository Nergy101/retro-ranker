name: üåô Nightly Playwright Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: "0 2 * * *"
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: nightly-tests
  cancel-in-progress: true

jobs:
  test:
    name: Run Playwright Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        browser: [chromium, "Mobile Chrome", firefox]
        include:
          - browser: chromium
            project: chromium
          - browser: "Mobile Chrome"
            project: "Mobile Chrome"
          - browser: firefox
            project: firefox

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: playwright/package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: cache-playwright
        with:
          path: |
            ~/.cache/ms-playwright
            playwright/.cache
          key: ${{ runner.os }}-playwright-${{ hashFiles('playwright/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright dependencies
        working-directory: playwright
        run: npm ci

      - name: Install Playwright browsers
        working-directory: playwright
        run: npx playwright install --with-deps
        if: steps.cache-playwright.outputs.cache-hit != 'true'

      - name: Create screenshots directory
        run: mkdir -p playwright/screenshots

      - name: Run Playwright tests
        working-directory: playwright
        run: npx playwright test --project="${{ matrix.project }}"
        continue-on-error: true
        env:
          # Set CI environment variable for Playwright
          CI: true
          TEST_USER_NICKNAME: ${{ secrets.TEST_USER_NICKNAME }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          TEST_USER_2_NICKNAME: ${{ secrets.TEST_USER_2_NICKNAME }}
          TEST_USER_2_PASSWORD: ${{ secrets.TEST_USER_2_PASSWORD }}

      - name: Analyze test results and generate summary
        working-directory: playwright
        run: |
          echo "üìä Test Results Summary for ${{ matrix.browser }} (${{ matrix.project }})"
          echo "=========================================="

          if [ -f "test-results.json" ]; then
            # Use jq to parse the JSON and extract test statistics
            if command -v jq &> /dev/null; then
              TOTAL=$(jq '.stats.total' test-results.json 2>/dev/null || echo '0')
              PASSED=$(jq '.stats.passed' test-results.json 2>/dev/null || echo '0')
              FAILED=$(jq '.stats.failed' test-results.json 2>/dev/null || echo '0')
              SKIPPED=$(jq '.stats.skipped' test-results.json 2>/dev/null || echo '0')

              echo "üìà Test Statistics:"
              echo "   Total tests: $TOTAL"
              echo "   Passed: $PASSED"
              echo "   Failed: $FAILED"
              echo "   Skipped: $SKIPPED"

              if [ "$FAILED" -eq 0 ]; then
                echo "‚úÖ All tests passed for ${{ matrix.browser }}!"
                echo "::notice::All tests passed for ${{ matrix.browser }} (${{ matrix.project }})"
              else
                echo "‚ùå $FAILED test(s) failed for ${{ matrix.browser }}"
                echo "::error::$FAILED test(s) failed for ${{ matrix.browser }} (${{ matrix.project }})"

                # List failed test names if available
                echo "üìã Failed tests:"
                jq -r '.suites[] | select(.specs != null) | .specs[] | select(.tests != null) | .tests[] | select(.results[] | .status == "failed") | .title' test-results.json 2>/dev/null | head -5 | while read test; do
                  if [ -n "$test" ]; then
                    echo "   - $test"
                  fi
                done
              fi
            else
              echo "‚ö†Ô∏è  jq not available, using basic parsing..."
              if grep -q '"failed":[1-9]' test-results.json 2>/dev/null; then
                echo "‚ùå Tests failed for ${{ matrix.browser }}"
                echo "::error::Tests failed for ${{ matrix.browser }} (${{ matrix.project }})"
              else
                echo "‚úÖ All tests passed for ${{ matrix.browser }}!"
                echo "::notice::All tests passed for ${{ matrix.browser }} (${{ matrix.project }})"
              fi
            fi
          else
            echo "‚ö†Ô∏è  No test-results.json found"
            echo "::warning::No test results found for ${{ matrix.browser }} (${{ matrix.project }})"
          fi

          echo "=========================================="

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results-${{ matrix.browser }}-${{ github.run_number }}
          path: |
            playwright/test-results/
            playwright/playwright-report/
          retention-days: 30

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots-${{ matrix.browser }}-${{ github.run_number }}
          path: playwright/screenshots/
          retention-days: 30
