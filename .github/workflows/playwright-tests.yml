name: 🧪 Playwright Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: playwright/package-lock.json

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: cache-playwright
        with:
          path: |
            ~/.cache/ms-playwright
            playwright/.cache
          key: ${{ runner.os }}-playwright-${{ hashFiles('playwright/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright dependencies
        working-directory: playwright
        run: npm ci

      - name: Install Playwright browsers
        working-directory: playwright
        run: npx playwright install --with-deps
        if: steps.cache-playwright.outputs.cache-hit != 'true'

      - name: Create screenshots directory
        run: mkdir -p playwright/screenshots

      - name: Run Playwright tests
        working-directory: playwright
        run: npm test
        env:
          CI: true
          TEST_USER_NICKNAME: ${{ secrets.TEST_USER_NICKNAME }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          TEST_USER_2_NICKNAME: ${{ secrets.TEST_USER_2_NICKNAME }}
          TEST_USER_2_PASSWORD: ${{ secrets.TEST_USER_2_PASSWORD }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results-${{ github.run_number }}
          path: |
            playwright/test-results/
            playwright/playwright-report/
          retention-days: 30

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots-${{ github.run_number }}
          path: playwright/screenshots/
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "## 🧪 Playwright Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "playwright/test-results" ]; then
            echo "### Test Results" >> $GITHUB_STEP_SUMMARY
            echo "- Test results are available in the artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- HTML report: playwright-report/index.html" >> $GITHUB_STEP_SUMMARY
            echo "- Screenshots: screenshots/ directory" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "playwright/screenshots" ]; then
            echo "### Screenshots Taken" >> $GITHUB_STEP_SUMMARY
            ls -la playwright/screenshots/ | grep -E '\.(png|jpg|jpeg)$' | head -10 >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Download artifacts to view detailed results" >> $GITHUB_STEP_SUMMARY
          echo "- Check the HTML report for interactive test results" >> $GITHUB_STEP_SUMMARY
          echo "- Review screenshots for visual regression testing" >> $GITHUB_STEP_SUMMARY

  # Comment on PR with test results
  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' && always()

    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Remove previous bot comments
            for (const comment of comments) {
              if (comment.user.type === 'Bot' && comment.body.includes('🧪 Playwright Test Results')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              }
            }

            // Create new comment with simple format
            const status = ("${{ needs.test.result }}" === "success") ? "✅ All tests passed" : "❌ Some tests failed";
            const summary =
              `## 🧪 Playwright Test Results\n\n**Status:** ${status}\n\n**Artifacts:**\n- 📄 [Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n- 📸 [Screenshots](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n- 📋 [HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\nDownload the artifacts to view detailed test results and screenshots.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
