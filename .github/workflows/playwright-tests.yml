name: 🧪 Playwright Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: playwright/package-lock.json

      - name: Install Playwright dependencies
        working-directory: playwright
        run: npm ci

      - name: Install Playwright browsers
        working-directory: playwright
        run: npx playwright install --with-deps

      - name: Create screenshots directory
        run: mkdir -p playwright/screenshots

      - name: Run Playwright tests
        working-directory: playwright
        run: npm test
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results-${{ github.run_number }}
          path: |
            playwright/test-results/
            playwright/playwright-report/
          retention-days: 30

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots-${{ github.run_number }}
          path: playwright/screenshots/
          retention-days: 30

      - name: Parse test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let summary = '## 🧪 Playwright Test Results\n\n';
            let testResults = {
              total: 0,
              passed: 0,
              failed: 0,
              skipped: 0,
              duration: 0
            };

            // Parse test results if they exist
            const resultsDir = 'playwright/test-results';
            if (fs.existsSync(resultsDir)) {
              const resultFiles = fs.readdirSync(resultsDir).filter(f => f.endsWith('.json'));

              resultFiles.forEach(file => {
                try {
                  const result = JSON.parse(fs.readFileSync(path.join(resultsDir, file), 'utf8'));
                  if (result.specs) {
                    result.specs.forEach(spec => {
                      spec.tests.forEach(test => {
                        testResults.total++;
                        testResults.duration += test.results[0]?.duration || 0;

                        if (test.results[0]?.status === 'passed') {
                          testResults.passed++;
                        } else if (test.results[0]?.status === 'failed') {
                          testResults.failed++;
                        } else if (test.results[0]?.status === 'skipped') {
                          testResults.skipped++;
                        }
                      });
                    });
                  }
                } catch (e) {
                  console.log('Error parsing result file:', file, e.message);
                }
              });
            }

            // Generate summary
            summary += `**Test Summary:**\n`;
            summary += `- ✅ Passed: ${testResults.passed}\n`;
            summary += `- ❌ Failed: ${testResults.failed}\n`;
            summary += `- ⏭️ Skipped: ${testResults.skipped}\n`;
            summary += `- 📊 Total: ${testResults.total}\n`;
            summary += `- ⏱️ Duration: ${Math.round(testResults.duration / 1000)}s\n\n`;

            if (testResults.failed > 0) {
              summary += `⚠️ **${testResults.failed} test(s) failed**\n\n`;
            } else if (testResults.total > 0) {
              summary += `🎉 **All tests passed!**\n\n`;
            }

            summary += `**Artifacts:**\n`;
            summary += `- 📄 [Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n`;
            summary += `- 📸 [Screenshots](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n`;
            summary += `- 📋 [HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n`;

            // Add to step summary
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary);

            // Set output for other jobs
            core.setOutput('test-summary', summary);
            core.setOutput('tests-passed', testResults.passed);
            core.setOutput('tests-failed', testResults.failed);
            core.setOutput('tests-total', testResults.total);

  # Comment on PR with test results
  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' && always()

    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Remove previous bot comments
            for (const comment of comments) {
              if (comment.user.type === 'Bot' && comment.body.includes('🧪 Playwright Test Results')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              }
            }

            // Create new comment
            const summary = `${{ needs.test.outputs.test-summary }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
