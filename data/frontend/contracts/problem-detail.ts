// deno-lint-ignore-file no-explicit-any
/**
 * Implementation of the HTTP Problem Details format as defined in RFC 7807
 * https://datatracker.ietf.org/doc/html/rfc7807
 */

export interface ProblemDetail {
  /**
   * A URI reference [RFC3986] that identifies the problem type.
   * This specification encourages that, when dereferenced, it provide
   * human-readable documentation for the problem type.
   * When this member is not present, its value is assumed to be
   * "about:blank".
   */
  type?: string;

  /**
   * A short, human-readable summary of the problem type.
   * It SHOULD NOT change from occurrence to occurrence of the problem,
   * except for purposes of localization.
   */
  title?: string;

  /**
   * The HTTP status code ([RFC7231], Section 6) generated by the
   * origin server for this occurrence of the problem.
   */
  status: number;

  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string;

  /**
   * A URI reference that identifies the specific occurrence of the problem.
   * It may or may not yield further information if dereferenced.
   */
  instance?: string;

  /**
   * Additional members can be defined by problem types.
   */
  [key: string]: any;
}

/**
 * Creates a Problem Detail object according to RFC 7807
 */
export function createProblemDetail(
  status: number,
  options?: Omit<ProblemDetail, "status">,
): ProblemDetail {
  return {
    type: "about:blank",
    ...options,
    status,
  };
}

/**
 * Predefined problem types for common HTTP errors
 */
export const ProblemTypes = {
  BAD_REQUEST: "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.1",
  UNAUTHORIZED: "https://datatracker.ietf.org/doc/html/rfc7235#section-3.1",
  FORBIDDEN: "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.3",
  NOT_FOUND: "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.4",
  METHOD_NOT_ALLOWED:
    "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.5",
  NOT_ACCEPTABLE: "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.6",
  CONFLICT: "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.8",
  GONE: "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.9",
  UNPROCESSABLE_ENTITY:
    "https://datatracker.ietf.org/doc/html/rfc4918#section-11.2",
  TOO_MANY_REQUESTS: "https://datatracker.ietf.org/doc/html/rfc6585#section-4",
  INTERNAL_SERVER_ERROR:
    "https://datatracker.ietf.org/doc/html/rfc7231#section-6.6.1",
  NOT_IMPLEMENTED:
    "https://datatracker.ietf.org/doc/html/rfc7231#section-6.6.2",
  SERVICE_UNAVAILABLE:
    "https://datatracker.ietf.org/doc/html/rfc7231#section-6.6.4",
};

/**
 * Helper functions for common HTTP errors
 */
export const ProblemDetail = {
  badRequest: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(400, {
      type: ProblemTypes.BAD_REQUEST,
      title: "Bad Request",
      detail,
      ...extensions,
    }),

  unauthorized: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(401, {
      type: ProblemTypes.UNAUTHORIZED,
      title: "Unauthorized",
      detail,
      ...extensions,
    }),

  forbidden: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(403, {
      type: ProblemTypes.FORBIDDEN,
      title: "Forbidden",
      detail,
      ...extensions,
    }),

  notFound: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(404, {
      type: ProblemTypes.NOT_FOUND,
      title: "Not Found",
      detail,
      ...extensions,
    }),

  methodNotAllowed: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(405, {
      type: ProblemTypes.METHOD_NOT_ALLOWED,
      title: "Method Not Allowed",
      detail,
      ...extensions,
    }),

  conflict: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(409, {
      type: ProblemTypes.CONFLICT,
      title: "Conflict",
      detail,
      ...extensions,
    }),

  unprocessableEntity: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(422, {
      type: ProblemTypes.UNPROCESSABLE_ENTITY,
      title: "Unprocessable Entity",
      detail,
      ...extensions,
    }),

  tooManyRequests: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(429, {
      type: ProblemTypes.TOO_MANY_REQUESTS,
      title: "Too Many Requests",
      detail,
      ...extensions,
    }),

  internalServerError: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(500, {
      type: ProblemTypes.INTERNAL_SERVER_ERROR,
      title: "Internal Server Error",
      detail,
      ...extensions,
    }),

  notImplemented: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(501, {
      type: ProblemTypes.NOT_IMPLEMENTED,
      title: "Not Implemented",
      detail,
      ...extensions,
    }),

  serviceUnavailable: (
    detail?: string,
    extensions?: Record<string, any>,
  ): ProblemDetail =>
    createProblemDetail(503, {
      type: ProblemTypes.SERVICE_UNAVAILABLE,
      title: "Service Unavailable",
      detail,
      ...extensions,
    }),
};
